package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Asset extends Contract {
    public static final String[] BINARY_ARRAY = {"","96505050600085141515610ca6577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb95507f7fb582f9fa6ce8e095b0bf28d0d61a3b104c418ce55e31d8184f2626fb569647868c8c8c8c604051610c9695949392919061369e565b60405180910390a1859650610ec4565b87826002815181101515610cb657fe5b906020019060200201511215610d30577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95507f7fb582f9fa6ce8e095b0bf28d0d61a3b104c418ce55e31d8184f2626fb569647868c8c8c8c604051610d2095949392919061369e565b60405180910390a1859650610ec4565b610d3a8b89612021565b8092508196505050600085141515610db6577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc95507f7fb582f9fa6ce8e095b0bf28d0d61a3b104c418ce55e31d8184f2626fb569647868c8c8c8c604051610da695949392919061369e565b60405180910390a1859650610ec4565b610de28a8a610ddc866001815181101515610dcd57fe5b90602001906020020151611aea565b8b610ed2565b9450600085141515610e58577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd95507f7fb582f9fa6ce8e095b0bf28d0d61a3b104c418ce55e31d8184f2626fb569647868c8c8c8c604051610e4895949392919061369e565b60405180910390a1859650610ec4565b610e81565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b7f7fb582f9fa6ce8e095b0bf28d0d61a3b104c418ce55e31d8184f2626fb569647868c8c8c8c604051610eb895949392919061369e565b60405180910390a18596505b505050505050949350505050565b60008060006060806000806000809650600095506002604051908082528060200260200182016040528015610f165781602001602082028038833980820191505090505b5094506003604051908082528060200260200182016040528015610f495781602001602082028038833980820191505090505b509350610f558c611465565b80965081955050506000846000815181101515610f6e57fe5b906020019060200201511415156113f057610f87612d0b565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610fed57600080fd5b505af1158015611001573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110259190810190612f5e565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161107c919061382f565b600060405180830381600087803b15801561109657600080fd5b505af11580156110aa573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161110391906139ea565b600060405180830381600087803b15801561111d57600080fd5b505af1158015611131573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161118a91906138f2565b600060405180830381600087803b1580156111a457600080fd5b505af11580156111b8573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611211919061399c565b600060405180830381600087803b15801561122b57600080fd5b505af115801561123f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161129891906138a4565b600060405180830381600087803b1580156112b257600080fd5b505af11580156112c6573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac368d846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611321929190613773565b602060405180830381600087803b15801561133b57600080fd5b505af115801561134f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113739190810190612fb0565b905060018114156113c7576113898a8c8b61027e565b95506000861415156113bd577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd96506113c2565b600096505b6113eb565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b611414565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96505b7f6f7433dcae9c6980545ba89cb4c5ea088268be8603df940d6caa11a3ac888a45878d8d8d8d60405161144b95949392919061369e565b60405180910390a186975050505050505050949350505050565b6060806000806060806000611478612d0b565b94508473ffffffffffffffffffffffffffffffffffffffff1663e8434e39898773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156114fb57600080fd5b505af115801561150f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115339190810190612f0c565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161156c929190613743565b602060405180830381600087803b15801561158657600080fd5b505af115801561159a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115be9190810190612f35565b935060036040519080825280602002602001820160405280156115f05781602001602082028038833980820191505090505b50925060026040519080825280602002602001820160405280156116235781602001602082028038833980820191505090505b5091508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561168a57600080fd5b505af115801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116c29190810190612fb0565b60001415611713577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360008151811015156116fa57fe5b9060200190602002018181525050828296509650611ae0565b8373ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117699190613706565b602060405180830381600087803b15801561178357600080fd5b505af1158015611797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117bb9190810190612f5e565b90508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118109061397c565b602060405180830381600087803b15801561182a57600080fd5b505af115801561183e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118629190810190612fb0565b83600181518110151561187157fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118d290613884565b602060405180830381600087803b1580156118ec57600080fd5b505af1158015611900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119249190810190612fb0565b83600281518110151561193357fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611994906139ca565b602060405180830381600087803b1580156119ae57600080fd5b505af11580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119e69190810190612ee3565b8260008151811015156119f557fe5b9060200190602002019060001916908160001916815250508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a60906138d2565b602060405180830381600087803b158015611a7a57600080fd5b505af1158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ab29190810190612ee3565b826001815181101515611ac157fe5b9060200190602002019060001916908160001916815250508282965096505b5050505050915091565b6060806000806000606060206040519080825280601f01601f191660200182016040528015611b285781602001602082028038833980820191505090505b50945060009350600092505b6020831015611bf2578260080260020a876001900402600102915060007f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515611be557818585815181101515611bac57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535083806001019450505b8280600101935050611b34565b836040519080825280601f01601f191660200182016040528015611c255781602001602082028038833980820191505090505b509050600092505b83","831015611cd9578483815181101515611c4357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028184815181101515611c9c57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508280600101935050611c2d565b8095505050505050919050565b60008060008060008060008095506000945060009350611d05896128c1565b8095508196505050600085141515611fb357611d1f612c52565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d8557600080fd5b505af1158015611d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611dbd9190810190612f5e565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e149190613927565b600060405180830381600087803b158015611e2e57600080fd5b505af1158015611e42573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e9b9190613801565b600060405180830381600087803b158015611eb557600080fd5b505af1158015611ec9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac368a846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f24929190613773565b602060405180830381600087803b158015611f3e57600080fd5b505af1158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f769190810190612fb0565b90506001811415611f8a5760009550611fae565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95505b611fd7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b7fc80814306a567881c5c316a4db1321b1f7c3d59f2c0c3baa0dd2013cdef90f34868a8a60405161200a9392919061360d565b60405180910390a185965050505050505092915050565b60006060600060608060606000806000806000975060026040519080825280602002602001820160405280156120665781602001602082028038833980820191505090505b50965060036040519080825280602002602001820160405280156120995781602001602082028038833980820191505090505b50955060026040519080825280602002602001820160405280156120d157816020015b60608152602001906001900390816120bc5790505b5094506120dd8c611465565b80985081975050506121068760008151811015156120f757fe5b90602001906020020151611aea565b85600081518110151561211557fe5b9060200190602002018190525061214387600181518110151561213457fe5b90602001906020020151611aea565b85600181518110151561215257fe5b90602001906020020181905250600086600081518110151561217057fe5b90602001906020020151141561284c578a86600281518110151561219057fe5b906020019060200201511215612209577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe97507f93b7fdfdc63f1dfb3aa65f0b61c9e7c9c3628bf8d53cfcf05d7d49a23c7696d7888d8d6040516121f69392919061360d565b60405180910390a18785995099506128b2565b612211612d0b565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561227757600080fd5b505af115801561228b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122af9190810190612f5e565b92508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612306919061382f565b600060405180830381600087803b15801561232057600080fd5b505af1158015612334573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b51661237589600081518110151561236657fe5b90602001906020020151611aea565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123ad91906139ea565b600060405180830381600087803b1580156123c757600080fd5b505af11580156123db573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b51661241c89600181518110151561240d57fe5b90602001906020020151611aea565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161245491906138f2565b600060405180830381600087803b15801561246e57600080fd5b505af1158015612482573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba748760018151811015156124b157fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124f3919061399c565b600060405180830381600087803b15801561250d57600080fd5b505af1158015612521573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba748c88600281518110151561255157fe5b90602001906020020151036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161259491906138a4565b600060405180830381600087803b1580156125ae57600080fd5b505af11580156125c2573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18d858773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561264857600080fd5b505af115801561265c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126809190810190612f0c565b6040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126ba939291906137a3565b602060405180830381600087803b1580156126d457600080fd5b505af11580156126e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061270c9190810190612fb0565b9150600182141515612781577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd97507f93b7fdfdc63f1dfb3aa65f0b61c9e7c9c3628bf8d53cfcf05d7d49a23c7696d7888d8d60405161276e9392919061360d565b60405180910390a18785995099506128b2565b6127cc6127a588600081518110151561279657fe5b90602001906020020151611aea565b6127c68960018151811015156127b757fe5b90602001906020020151611aea565b8d61027e565b905060008114151561284357807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd80197507f93b7fdfdc63f1dfb3aa65f0b61c9e7c9c3628bf8d53cfcf05d7d49a23c7696d7888d8d6040516128309392919061360d565b60405180910390a18785995099506128b2565b60009750612870565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff97505b7f93b7fdfdc63f1dfb3aa65f0b61c9e7c9c3628bf8d53cfcf05d7d49a23c7696d7888d8d6040516128a39392919061360d565b60405180910390a18785995099505b50505050505050509250929050565b6000806000806000806128d2612c52565b93508373ffffffffffffffffffffffffffffffffffffffff1663e8434e39888673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561295557600080fd5b505af1158015612969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061298d9190810190612f0c565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016129c6929190613743565b602060405180830381600087803b1580156129e057600080fd5b505af11580156129f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a189190810190612f35565b9250600091508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612a8257600080fd5b505af1158015612a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612aba9190810190612fb0565b60001415612af0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8281915095509550612c49565b8273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b469190613706565b602060405180830381600087803b158015612b6057600080fd5b505af1158015612b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b989190810190612f5e565b905060008173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612bef906137e1565b602060405180830381600087803b158015612c0957600080fd5b505af1158015612c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682","","5dc564ba6e06e06b1c5aafcf1a31b786c06c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506200002b62000031640100000000026401000000009004565b620003c1565b600061100190508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200008d906200031f565b602060405180830381600087803b158015620000a857600080fd5b505af1158015620000bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620000e39190810190620001a9565b508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000139906200036b565b602060405180830381600087803b1580156200015457600080fd5b505af115801562000169573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200018f9190810190620001a9565b5050565b6000620001a18251620003b7565b905092915050565b600060208284031215620001bc57600080fd5b6000620001cc8482850162000193565b91505092915050565b6000600b82527f61737365745f76616c75650000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f745f6173736574000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601982527f616363312c20616363322c206d6f6e65792c20737461747573000000000000006020830152604082019050919050565b6000600d82527f745f7472616e73616374696f6e000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f6163636f756e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060608201905081810360008301526200033a816200020c565b905081810360208301526200034f81620002b1565b905081810360408301526200036481620001d5565b9050919050565b6000606082019050818103600083015262000386816200027a565b905081810360208301526200039b81620002e8565b90508181036040830152620003b08162000243565b9050919050565b6000819050919050565b613c5080620003d16000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635b325d781461009357806360f6b3b5146100d1578063b5fcafc01461010f578063bbd51fb01461014c578063bda35fde14610189578063cf5b1a01146101c6578063de8bd83814610203578063eb8aa2c414610241575b600080fd5b34801561009f57600080fd5b506100ba60048036036100b59190810190612fd9565b61027e565b6040516100c89291906135e4565b60405180910390f35b3480156100dd57600080fd5b506100f860048036036100f39190810190612fd9565b61060f565b604051610106929190613562565b60405180910390f35b34801561011b57600080fd5b50610136600480360361013191908101906130ed565b610c94565b6040516101439190613599565b60405180910390f35b34801561015857600080fd5b50610173600480360361016e919081019061301a565b61102c565b6040516101809190613599565b60405180910390f35b34801561019557600080fd5b506101b060048036036101ab9190810190612eba565b611367565b6040516101bd9190613721565b60405180910390f35b3480156101d257600080fd5b506101ed60048036036101e8919081019061306e565b611563565b6040516101fa9190613599565b60405180910390f35b34801561020f57600080fd5b5061022a6004803603610225919081019061301a565b611e1f565b6040516102389291906135b4565b60405180910390f35b34801561024d57600080fd5b50610268600480360361026391908101906130ed565b6126bf565b6040516102759190613599565b60405180910390f35b60008060008060008061028f612c52565b93508373ffffffffffffffffffffffffffffffffffffffff1663d8ac5957888673ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561031257600080fd5b505af1158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061034a9190810190612f0c565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610383929190613743565b602060405180830381600087803b15801561039d57600080fd5b505af11580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103d59190810190612f35565b9250600091508273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561043f57600080fd5b505af1158015610453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104779190810190612fb0565b600014156104ad577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8281915095509550610606565b8273ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016105039190613706565b602060405180830381600087803b15801561051d57600080fd5b505af1158015610531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105559190810190612f5e565b905060008173ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016105ac906137e1565b602060405180830381600087803b1580156105c657600080fd5b505af11580156105da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105fe9190810190612fb0565b819150955095505b50505050915091565b6060806000806060806000610622612d0b565b94508473ffffffffffffffffffffffffffffffffffffffff1663d8ac5957898773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156106a557600080fd5b505af11580156106b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106dd9190810190612f0c565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610716929190613743565b602060405180830381600087803b15801561073057600080fd5b505af1158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107689190810190612f35565b9350600360405190808252806020026020018201604052801561079a5781602001602082028038833980820191505090505b50925060026040519080825280602002602001820160405280156107cd5781602001602082028038833980820191505090505b5091508373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561083457600080fd5b505af1158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061086c9190810190612fb0565b600014156108bd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360008151811015156108a457fe5b9060200190602002018181525050828296509650610c8a565b8373ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109139190613706565b602060405180830381600087803b15801561092d57600080fd5b505af1158015610941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109659190810190612f5e565b90508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109ba9061392e565b602060405180830381600087803b1580156109d457600080fd5b505af11580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a0c9190810190612fb0565b836001815181101515610a1b57fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a7c9061397c565b602060405180830381600087803b158015610a9657600080fd5b505af1158015610aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ace9190810190612fb0565b836002815181101515610add57fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff1663fdebe4146040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b3e906139ca565b602060405180830381600087803b158015610b5857600080fd5b505af1158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b909190810190612ee3565b826000815181101515610b9f57fe5b9060200190602002019060001916908160001916815250508073ffffffffffffffffffffffffffffffffffffffff1663fdebe4146040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c0a906138d9565b602060405180830381600087803b158015610c2457600080fd5b505af1158015610c3857","","000000000000000000000000000000000000000000000000028152600401611c569190613801565b600060405180830381600087803b158015611c7057600080fd5b505af1158015611c84573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68c838773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d0a57600080fd5b505af1158015611d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d429190810190612f0c565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d7c939291906137a3565b602060405180830381600087803b158015611d9657600080fd5b505af1158015611daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611dce9190810190612fb0565b507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d604051611e04949392919061364b565b60405180910390a18798505b50505050505050509392505050565b6000606060006060806060600080600080600097506002604051908082528060200260200182016040528015611e645781602001602082028038833980820191505090505b5096506003604051908082528060200260200182016040528015611e975781602001602082028038833980820191505090505b5095506002604051908082528060200260200182016040528015611ecf57816020015b6060815260200190600190039081611eba5790505b509450611edb8c61060f565b8098508197505050611f04876000815181101515611ef557fe5b90602001906020020151611367565b856000815181101515611f1357fe5b90602001906020020181905250611f41876001815181101515611f3257fe5b90602001906020020151611367565b856001815181101515611f5057fe5b906020019060200201819052506000866000815181101515611f6e57fe5b90602001906020020151141561264a578a866002815181101515611f8e57fe5b906020019060200201511215612007577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe97507f78378154ce3a6ad60630885faa062df814d89394a159ce5282addf84086033c0888d8d604051611ff49392919061360d565b60405180910390a18785995099506126b0565b61200f612d0b565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561207557600080fd5b505af1158015612089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120ad9190810190612f5e565b92508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48d6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161210491906138a4565b600060405180830381600087803b15801561211e57600080fd5b505af1158015612132573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb461217389600081518110151561216457fe5b90602001906020020151611367565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121ab91906139ea565b600060405180830381600087803b1580156121c557600080fd5b505af11580156121d9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb461221a89600181518110151561220b57fe5b90602001906020020151611367565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161225291906138f9565b600060405180830381600087803b15801561226c57600080fd5b505af1158015612280573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663def426988760018151811015156122af57fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122f1919061394e565b600060405180830381600087803b15801561230b57600080fd5b505af115801561231f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663def426988c88600281518110151561234f57fe5b90602001906020020151036040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612392919061399c565b600060405180830381600087803b1580156123ac57600080fd5b505af11580156123c0573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68d858773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561244657600080fd5b505af115801561245a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061247e9190810190612f0c565b6040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124b8939291906137a3565b602060405180830381600087803b1580156124d257600080fd5b505af11580156124e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061250a9190810190612fb0565b915060018214151561257f577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd97507f78378154ce3a6ad60630885faa062df814d89394a159ce5282addf84086033c0888d8d60405161256c9392919061360d565b60405180910390a18785995099506126b0565b6125ca6125a388600081518110151561259457fe5b90602001906020020151611367565b6125c48960018151811015156125b557fe5b90602001906020020151611367565b8d611563565b905060008114151561264157807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd80197507f78378154ce3a6ad60630885faa062df814d89394a159ce5282addf84086033c0888d8d60405161262e9392919061360d565b60405180910390a18785995099506126b0565b6000975061266e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff97505b7f78378154ce3a6ad60630885faa062df814d89394a159ce5282addf84086033c0888d8d6040516126a19392919061360d565b60405180910390a18785995099505b50505050505050509250929050565b600080600060608060008060008096506000955060026040519080825280602002602001820160405280156127035781602001602082028038833980820191505090505b50945060036040519080825280602002602001820160405280156127365781602001602082028038833980820191505090505b5093506127428c61060f565b8096508195505050600084600081518110151561275b57fe5b90602001906020020151141515612bdd57612774612d0b565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156127da57600080fd5b505af11580156127ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128129190810190612f5e565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48d6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161286991906138a4565b600060405180830381600087803b15801561288357600080fd5b505af1158015612897573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128f091906139ea565b600060405180830381600087803b15801561290a57600080fd5b505af115801561291e573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161297791906138f9565b600060405180830381600087803b15801561299157600080fd5b505af11580156129a5573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def426988a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016129fe919061394e565b600060405180830381600087803b158015612a1857600080fd5b505af1158015612a2c573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def426988a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a85919061399c565b600060405180830381600087803b158015612a9f57600080fd5b505af1158015612ab3573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08d846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b0e929190613773565b602060405180830381600087803b158015612b2857600080fd5b505af1158015612b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b609190810190612fb0565b90506001811415612bb457612b768a8c8b611563565b9550600086141515612baa577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9650612baf565b600096505b612bd8565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b612c01565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96505b7f7c0a3cc58ee6cdc9979c0ec0718ebc361a232165395eaa3e3e4dcc8b2b6c2ad2878d8d8d8d604051612c3895","","f18aa829beba16901f4cb89dbcaf2a8a026c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"from_account\",\"type\":\"string\"},{\"name\":\"to_account\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"old_id\",\"type\":\"string\"},{\"name\":\"new_id\",\"type\":\"string\"},{\"name\":\"acc\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"splitTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"acc1\",\"type\":\"string\"},{\"name\":\"acc2\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"addTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"select_transaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"byte32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"asset_value\",\"type\":\"int256\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"updateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"asset_value\",\"type\":\"int256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"from_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"acc1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"acc2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"AddTransactionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"UpdateTransactionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"old_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"new_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"acc\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"SplitTransactionEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_SPLITTRANSACTION = "splitTransaction";

    public static final String FUNC_ADDTRANSACTION = "addTransaction";

    public static final String FUNC_SELECT_TRANSACTION = "select_transaction";

    public static final String FUNC_BYTE32TOSTRING = "byte32ToString";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_UPDATETRANSACTION = "updateTransaction";

    public static final String FUNC_SELECT = "select";

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event ADDTRANSACTIONEVENT_EVENT = new Event("AddTransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATETRANSACTIONEVENT_EVENT = new Event("UpdateTransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event SPLITTRANSACTIONEVENT_EVENT = new Event("SplitTransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    protected Asset(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt transfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String from_account, String to_account, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt splitTransaction(String old_id, String new_id, String acc, BigInteger money) {
        final Function function = new Function(
                FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void splitTransaction(String old_id, String new_id, String acc, BigInteger money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSplitTransaction(String old_id, String new_id, String acc, BigInteger money) {
        final Function function = new Function(
                FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getSplitTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getSplitTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt addTransaction(String id, String acc1, String acc2, BigInteger money) {
        final Function function = new Function(
                FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc1), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc2), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addTransaction(String id, String acc1, String acc2, BigInteger money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc1), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc2), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddTransaction(String id, String acc1, String acc2, BigInteger money) {
        final Function function = new Function(
                FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc1), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc2), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getAddTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getAddTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<List<BigInteger>, List<byte[]>> select_transaction(String id) throws ContractException {
        final Function function = new Function(FUNC_SELECT_TRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, List<byte[]>>(
                convertToNative((List<Int256>) results.get(0).getValue()), 
                convertToNative((List<Bytes32>) results.get(1).getValue()));
    }

    public String byte32ToString(byte[] x) throws ContractException {
        final Function function = new Function(FUNC_BYTE32TOSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt register(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void register(String account, BigInteger asset_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateTransaction(String id, BigInteger money) {
        final Function function = new Function(
                FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateTransaction(String id, BigInteger money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateTransaction(String id, BigInteger money) {
        final Function function = new Function(
                FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, List<String>> getUpdateTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, List<String>>(

                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue())
                );
    }

    public Tuple2<BigInteger, BigInteger> select(String account) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.asset_value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRegisterEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRegisterEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from_account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to_account = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AddTransactionEventEventResponse> getAddTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDTRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<AddTransactionEventEventResponse> responses = new ArrayList<AddTransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddTransactionEventEventResponse typedResponse = new AddTransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.acc1 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.acc2 = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddTransactionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddTransactionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateTransactionEventEventResponse> getUpdateTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATETRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateTransactionEventEventResponse> responses = new ArrayList<UpdateTransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateTransactionEventEventResponse typedResponse = new UpdateTransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateTransactionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATETRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateTransactionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATETRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SplitTransactionEventEventResponse> getSplitTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SPLITTRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<SplitTransactionEventEventResponse> responses = new ArrayList<SplitTransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SplitTransactionEventEventResponse typedResponse = new SplitTransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.old_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.new_id = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.acc = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSplitTransactionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SPLITTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSplitTransactionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SPLITTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Asset load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Asset(contractAddress, client, credential);
    }

    public static Asset deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Asset.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String account;

        public BigInteger asset_value;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String from_account;

        public String to_account;

        public BigInteger amount;
    }

    public static class AddTransactionEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String id;

        public String acc1;

        public String acc2;

        public BigInteger money;
    }

    public static class UpdateTransactionEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String id;

        public BigInteger money;
    }

    public static class SplitTransactionEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String old_id;

        public String new_id;

        public String acc;

        public BigInteger money;
    }
}
